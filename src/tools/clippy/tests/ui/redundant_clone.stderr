error: redundant clone
  --> $DIR/redundant_clone.rs:10:42
   |
LL |     let _s = ["lorem", "ipsum"].join(" ").to_string();
   |                                          ^^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:10:14
   |
LL |     let _s = ["lorem", "ipsum"].join(" ").to_string();
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `-D clippy::redundant-clone` implied by `-D warnings`

error: redundant clone
  --> $DIR/redundant_clone.rs:13:15
   |
LL |     let _s = s.clone();
   |               ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:13:14
   |
LL |     let _s = s.clone();
   |              ^

error: redundant clone
  --> $DIR/redundant_clone.rs:16:15
   |
LL |     let _s = s.to_string();
   |               ^^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:16:14
   |
LL |     let _s = s.to_string();
   |              ^

error: redundant clone
  --> $DIR/redundant_clone.rs:19:15
   |
LL |     let _s = s.to_owned();
   |               ^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:19:14
   |
LL |     let _s = s.to_owned();
   |              ^

error: redundant clone
  --> $DIR/redundant_clone.rs:21:42
   |
LL |     let _s = Path::new("/a/b/").join("c").to_owned();
   |                                          ^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:21:14
   |
LL |     let _s = Path::new("/a/b/").join("c").to_owned();
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: redundant clone
  --> $DIR/redundant_clone.rs:23:42
   |
LL |     let _s = Path::new("/a/b/").join("c").to_path_buf();
   |                                          ^^^^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:23:14
   |
LL |     let _s = Path::new("/a/b/").join("c").to_path_buf();
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: redundant clone
  --> $DIR/redundant_clone.rs:25:29
   |
LL |     let _s = OsString::new().to_owned();
   |                             ^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:25:14
   |
LL |     let _s = OsString::new().to_owned();
   |              ^^^^^^^^^^^^^^^

error: redundant clone
  --> $DIR/redundant_clone.rs:27:29
   |
LL |     let _s = OsString::new().to_os_string();
   |                             ^^^^^^^^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:27:14
   |
LL |     let _s = OsString::new().to_os_string();
   |              ^^^^^^^^^^^^^^^

error: redundant clone
  --> $DIR/redundant_clone.rs:38:19
   |
LL |     let _t = tup.0.clone();
   |                   ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:38:14
   |
LL |     let _t = tup.0.clone();
   |              ^^^^^

error: redundant clone
  --> $DIR/redundant_clone.rs:72:25
   |
LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }
   |                         ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:72:24
   |
LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }
   |                        ^

error: redundant clone
  --> $DIR/redundant_clone.rs:129:15
   |
LL |     let _s = s.clone();
   |               ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:129:14
   |
LL |     let _s = s.clone();
   |              ^

error: redundant clone
  --> $DIR/redundant_clone.rs:130:15
   |
LL |     let _t = t.clone();
   |               ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:130:14
   |
LL |     let _t = t.clone();
   |              ^

error: redundant clone
  --> $DIR/redundant_clone.rs:140:19
   |
LL |         let _f = f.clone();
   |                   ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:140:18
   |
LL |         let _f = f.clone();
   |                  ^

error: redundant clone
  --> $DIR/redundant_clone.rs:152:14
   |
LL |     let y = x.clone().join("matthias");
   |              ^^^^^^^^ help: remove this
   |
note: cloned value is neither consumed nor mutated
  --> $DIR/redundant_clone.rs:152:13
   |
LL |     let y = x.clone().join("matthias");
   |             ^^^^^^^^^

error: redundant clone
  --> $DIR/redundant_clone.rs:206:11
   |
LL |     foo(&x.clone(), move || {
   |           ^^^^^^^^ help: remove this
   |
note: this value is dropped without further use
  --> $DIR/redundant_clone.rs:206:10
   |
LL |     foo(&x.clone(), move || {
   |          ^

error: aborting due to 15 previous errors

